import { useState, FormEvent, useCallback, memo, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import Button from '../components/common/Button';
import Card from '../components/common/Card';
import Input from '../components/common/Input';
import Textarea from '../components/common/Textarea';
import { useTickets } from '../hooks/useTickets';
import type { TicketFormData } from '../types';
import './HomePage.css';

interface QuickFormData {
  name: string;
  phone: string;
  email: string;
  description: string;
}

interface UserIdentifier {
  clientName: string;
  email: string;
  phone: string;
}

const HomePage = memo(function HomePage() {
  const { t } = useTranslation();
  const [formData, setFormData] = useState<QuickFormData>({
    name: '',
    phone: '',
    email: '',
    description: '',
  });
  const [validationErrors, setValidationErrors] = useState<{[key: string]: string | undefined}>({});
  const { loading, error, success, submitTicket, resetError } = useTickets();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const userIdentifierString = localStorage.getItem('userIdentifier');
    if (userIdentifierString) {
      try {
        const userIdentifier: UserIdentifier = JSON.parse(userIdentifierString);
        setFormData(prev => ({
          ...prev,
          name: userIdentifier.clientName || '',
          email: userIdentifier.email || '',
          phone: userIdentifier.phone || '',
        }));
      } catch (error) {
        console.error('Error parsing userIdentifier from localStorage:', error);
      }
    }
  }, []);

  const validateForm = useCallback((): boolean => {
    const errors: {[key: string]: string | undefined} = {};

    if (!formData.name.trim()) {
      errors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    if (!formData.phone.trim()) {
      errors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    if (!formData.email.trim()) {
      errors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }

    if (!formData.description.trim()) {
      errors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.description.trim().length < 10) {
      errors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  }, [formData]);

  const handleQuickSubmit = useCallback(async (e: FormEvent) => {
    e.preventDefault();
    resetError();

    if (!validateForm()) {
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç TicketFormData
    const ticketData: TicketFormData = {
      clientName: formData.name,
      phone: formData.phone,
      email: formData.email,
      serviceType: 'consultation', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–æ—Ä–º—ã
      description: formData.description,
      priority: 'medium', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    };

    const result = await submitTicket(ticketData);

    if (result.success) {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      const userIdentifier = JSON.stringify({
        name: formData.name,
        email: formData.email,
        phone: formData.phone
      });
      localStorage.setItem('userIdentifier', userIdentifier);

      setFormData({ name: '', phone: '', email: '', description: '' });
      setValidationErrors({});
    }
  }, [formData, submitTicket, resetError, validateForm]);

  return (
    <div className="home-page">
        {/* Hero —Å–µ–∫—Ü–∏—è */}
        <header className="hero">
          <h1>
            {t('homePage.heroTitle')}
          </h1>
          <p className="subtitle">
            {t('homePage.heroSubtitle')}
          </p>
          <div className="hero-actions">
            <Button onClick={() => window.location.href = '/services'} aria-label={t('homePage.servicesButton')}>
              {t('homePage.servicesButton')}
            </Button>
            <Button
              variant="secondary"
              onClick={() => document.getElementById('quick-form')?.scrollIntoView({ behavior: 'smooth' })}
              aria-label={t('homePage.requestButton')}
            >
              {t('homePage.requestButton')}
            </Button>
          </div>
        </header>

        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
        <section className="features" aria-labelledby="advantages-title">
          <div className="features-header">
            <h2 id="advantages-title" className="features-title">{t('homePage.whyUs')}</h2>
            <p className="features-subtitle">
              {t('homePage.featuresSubtitle')}
            </p>
          </div>
          <div className="features-grid" role="list">
            <Card role="listitem" onClick={() => {
              const element = document.getElementById('quick-form');
              element?.scrollIntoView({ behavior: 'smooth' });
            }}>
              <div className="feature-card" title="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–µ">
                <div className="feature-icon">
                  <span aria-hidden="true">‚ö°</span>
                </div>
                <h3 className="feature-title">{t('homePage.quickResponse')}</h3>
                <p className="feature-description">
                  {t('homePage.quickResponseDesc')}
                </p>
              </div>
            </Card>

            <Card role="listitem" onClick={() => window.location.href = '/services'}>
              <div className="feature-card" title="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö">
                <div className="feature-icon">
                  <span aria-hidden="true">üéì</span>
                </div>
                <h3 className="feature-title">{t('homePage.professionalism')}</h3>
                <p className="feature-description">
                  {t('homePage.professionalismDesc')}
                </p>
              </div>
            </Card>

            <Card role="listitem" onClick={() => window.location.href = '/pricing'}>
              <div className="feature-card" title="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ü–µ–Ω–∞—Ö">
                <div className="feature-icon">
                  <span aria-hidden="true">üí∞</span>
                </div>
                <h3 className="feature-title">{t('homePage.fairPrices')}</h3>
                <p className="feature-description">
                  {t('homePage.fairPricesDesc')}
                </p>
              </div>
            </Card>

            <Card role="listitem" onClick={() => window.location.href = '/knowledge'}>
              <div className="feature-card" title="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö">
                <div className="feature-icon">
                  <span aria-hidden="true">‚úÖ</span>
                </div>
                <h3 className="feature-title">{t('homePage.qualityGuarantee')}</h3>
                <p className="feature-description">
                  {t('homePage.qualityGuaranteeDesc')}
                </p>
              </div>
            </Card>
          </div>
        </section>

        {/* –ë—ã—Å—Ç—Ä–∞—è —Ñ–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ */}
        <section id="quick-form" className="cta" aria-labelledby="contact-form-title">
          <div className="cta-container">
            <h2 id="contact-form-title" className="cta-title">{t('homePage.leaveRequest')}</h2>
            <p className="cta-subtitle">
              {t('homePage.formSubtitle')}
            </p>

            {success && (
              <div className="success-message">
                {t('homePage.successMessage')}
              </div>
            )}

            {error && (
              <div className="error-message">
                ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {error}
              </div>
            )}

            <form onSubmit={handleQuickSubmit} className="form">
              <Input
                label={t('homePage.yourName')}
                type="text"
                value={formData.name}
                onChange={(value) => {
                  setFormData({ ...formData, name: value });
                  if (validationErrors.name) {
                    setValidationErrors(prev => ({ ...prev, name: undefined }));
                  }
                }}
                error={validationErrors.name}
                placeholder={t('homePage.namePlaceholder')}
                required
                disabled={loading}
              />

              <Input
                label={t('homePage.phone')}
                type="tel"
                value={formData.phone}
                onChange={(value) => {
                  setFormData({ ...formData, phone: value });
                  if (validationErrors.phone) {
                    setValidationErrors(prev => ({ ...prev, phone: undefined }));
                  }
                }}
                error={validationErrors.phone}
                placeholder="+374 (99) 12-34-56"
                required
                disabled={loading}
              />

              <Input
                label={t('homePage.email')}
                type="email"
                value={formData.email}
                onChange={(value) => {
                  setFormData({ ...formData, email: value });
                  if (validationErrors.email) {
                    setValidationErrors(prev => ({ ...prev, email: undefined }));
                  }
                }}
                error={validationErrors.email}
                placeholder="example@email.com"
                required
                disabled={loading}
              />

              <Textarea
                label={t('homePage.describeProblem')}
                value={formData.description}
                onChange={(value) => {
                  setFormData({ ...formData, description: value });
                  if (validationErrors.description) {
                    setValidationErrors(prev => ({ ...prev, description: undefined }));
                  }
                }}
                error={validationErrors.description}
                placeholder={t('homePage.describeProblemPlaceholder')}
                required
                disabled={loading}
                rows={4}
              />

              <Button type="submit" disabled={loading} loading={loading}>
                {loading ? t('homePage.sending') : t('homePage.sendRequest')}
              </Button>
            </form>

            <p className="note">
              {t('homePage.callUs')} <a href="tel:+37495019753" className="link">+374 (95) 01-97-53</a>
            </p>
          </div>
        </section>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <section className="contact" aria-labelledby="contact-info-title">
          <h2 id="contact-info-title" className="visually-hidden">
            {t('contacts.title')}
          </h2>
          <div className="contact-container">
            <div className="contact-grid" role="list">
                <div className="contact-item" role="listitem" onClick={() => window.location.href = 'tel:+37495019753'}>
                  <span className="contact-icon" aria-hidden="true">üìû</span>
                  <div>
                    <h3 className="contact-title">{t('homePage.phoneTitle')}</h3>
                    <p className="contact-text">+374 (95) 01-97-53</p>
                  </div>
                </div>

                <div className="contact-item" role="listitem" onClick={() => window.location.href = 'mailto:info@pchelp.linkpc.net'}>
                  <span className="contact-icon" aria-hidden="true">üìß</span>
                  <div>
                    <h3 className="contact-title">{t('homePage.email')}</h3>
                    <p className="contact-text">info@pchelp.linkpc.net</p>
                  </div>
                </div>
 
                <div className="contact-item" role="listitem" onClick={() => window.location.href = '/contacts'}>
                  <span className="contact-icon" aria-hidden="true">üìç</span>
                  <div>
                    <h3 className="contact-title">{t('homePage.address')}</h3>
                    <p className="contact-text">{t('homePage.fullAddress')}</p>
                  </div>
                </div>
 
                <div className="contact-item" role="listitem" onClick={() => window.location.href = '/contacts'}>
                  <span className="contact-icon" aria-hidden="true">üïê</span>
                  <div>
                    <h3 className="contact-title">{t('homePage.workingHours')}</h3>
                    <p className="contact-text" dangerouslySetInnerHTML={{ __html: t('homePage.hours') }} />
                  </div>
                </div>
              </div>
          </div>
        </section>
    </div>
  );
});

HomePage.displayName = 'HomePage';

export default HomePage;

// –£–¥–∞–ª–µ–Ω—ã –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è CSS –∫–ª–∞—Å—Å—ã –∏–∑ HomePage.module.css